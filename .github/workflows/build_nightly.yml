name: Nightly build

on:
  push:
    branches:
      - nightly

jobs:
  check-recent-commit:
    name: Configure
    runs-on: ubuntu-latest
    outputs:
      is_recent: ${{ steps.state.outputs.is_recent }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Latest Commit Time
        id: commit_time
        run: |
          # Fetch the commit time of the latest commit
          LATEST_COMMIT_TIME=$(git log -1 --format="%ct")
          echo "latest_commit_time=${LATEST_COMMIT_TIME}" >> $GITHUB_ENV

      - name: Compare Commit Time with Current Time
        id: state
        run: |
          CURRENT_TIME=$(date +%s)
          COMMIT_TIME=${{ env.latest_commit_time }}
          DIFFERENCE=$((CURRENT_TIME - COMMIT_TIME))

          # Check if the commit is within 86400 seconds (1 day)
          if [ "$DIFFERENCE" -lt 86400 ]; then
            echo "✅ Commit is less than a day old."
            echo "is_recent=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Commit is older than a day."
            echo "is_recent=false" >> $GITHUB_OUTPUT
          fi
          
  # Windows nightly build      
  build-deps-windows:
    name: Deps (Windows)
    needs: check-recent-commit
    if: needs.check-recent-commit.outputs.is_recent == 'true'
    uses: fr3ak2402/BambuStudio/.github/workflows/build_deps_windows.yml@nightly

  build-slicer-windows:
    name: Slicer (Windows)
    needs: build-deps-windows
    if: success()
    uses: fr3ak2402/BambuStudio/.github/workflows/build_slicer_windows.yml@nightly
        
  # macOS nightly build
  build-deps-macos:
    name: Deps (macOS)
    needs: check-recent-commit
    if: needs.check-recent-commit.outputs.is_recent == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  build-slicer-macos:
    name: Slicer (macOS)
    runs-on: macos-latest
    needs: build-deps-macos
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  check-nightly-release:
    name: Check nightly release
    runs-on: ubuntu-latest
    #needs:
    #  - build-slicer-windows
    #  - build-slicer-macos
    # if: success() || failure()  # Run if any of the slicer jobs succeed
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if release already exists
        id: check_release
        run: |
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ vars.OWNER }}/${{ vars.REPOSITORY }}/releases/tags/V${{ vars.GSN_VERSION }}-nightly")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n 1)

          if [[ "$HTTP_STATUS" == "404" ]]; then
            echo "❌ Release not found, creating a new one."
            echo "release_exists=false" >> $GITHUB_OUTPUT
          elif [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ Release found, updating the release."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Failed to check release status."
            exit 1
          fi

  create-nightly-release:
    name: Create nightly release
    runs-on: windows-latest
    needs: check-nightly-release
    if: needs.check-nightly-release.outputs.release_exists == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      #- name: Check release artifact (windows)
      #  uses: LIT-Protocol/artifact-exists-action@v0
      #  id: "windows-artifact-state"
      # with:
      #    name: "GalaxySlicerNeo_win_x64_v${{ vars.GSN_VERSION }}-nightly.zip"

      #- name: Download slicer (windows)
      #  uses: actions/download-artifact@v4
      #  if: ${{ steps.windows-artifact-state.outputs.exists == 'true' }}
      #  with:
      #    name: GalaxySlicerNeo_win_x64_v${{ vars.GSN_VERSION }}-nightly.zip
      #    path: ${{ github.workspace }}/work/Projects/GalaxySlicerNeo

      - name: Test
        run: echo ${{ github.sha }} > Release.txt

      - name: Pack Release.txt
        run: zip Release.zip Release.txt

      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ vars.OWNER }}/${{ vars.REPOSITORY }}
          token: ${{ secrets.GALAXYSLICERNEO_ACCESS_TOKEN }}
          name: "GalaxySlicerNeo V${{ vars.GSN_VERSION }} Nightly"
          tag_name: "V${{ vars.GSN_VERSION }}-nightly"
          prerelease: true
          draft: false
          files: |
            Release.zip

  update-nightly-release:
    name: Update nightly release
    runs-on: windows-latest
    needs: check-nightly-release
    if: needs.check-nightly-release.outputs.release_exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4