name: Build windows deps

on:
  workflow_call:

jobs:
  build_deps:
    name: Build deps
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check cache
        id: check-cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps
          key: GalaxySlicerNeo_deps_win_x64_v${{ vars.DEPS_VERSION }}-nightly

      - name: setup dev on Windows
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Install strawberryperl
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
           choco install strawberryperl

      - name: Build on Windows
        if: steps.check-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: |
           mkdir ${{ github.workspace }}\deps\build
           cd "${{ github.workspace }}\deps\build"
           cmake ../ -G "Visual Studio 16 2019" -A x64 -DDESTDIR="${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps" -DCMAKE_BUILD_TYPE=Release
           msbuild /m ALL_BUILD.vcxproj
           cd ${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps
           
      - name: Clean up
        if: steps.check-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: |
            powershell -command "Remove-Item '${{ github.workspace }}/deps/build' -Recurse -Force"

      - name: Cache deps
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        id: cache-deps
        with:
          path: ${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps
          key: GalaxySlicerNeo_deps_win_x64_v${{ vars.DEPS_VERSION }}-nightly
      
  prepare_pkg_config:
    name: pkg-config
    uses: fr3ak2402/BambuStudio/.github/workflows/prepare_pkgconfig_windows.yml@master

  check-python:
    name: Check latest python version
    runs-on: ubuntu-latest
    outputs:
      is_outdated: ${{ steps.compare_python.outputs.is_outdated }}
      latest_version: ${{ steps.compare_python.outputs.latest_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest stable Python version
        id: get_version
        run: |
          # Fetch the JSON file with the version information
          response=$(curl -s https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json)
          
          # Extract the latest stable version
          python_version=$(echo "$response" | jq -r '.[] | select(.stable == true) | .version' | head -n 1)
          
          echo "Latest stable Python version: $python_version"

          # Set the extracted version as an environment variable
          echo "latest_release=$python_version" >> $GITHUB_ENV

      - name: Compare Python versions
        id: compare_python
        run: |
          cache_python_version="${{ vars.PYTHON_VERSION }}"
          echo "Cache Python release is: $cache_python_version"

          latest_release="${{ env.latest_release }}"

          if [ "$latest_release" == "$cache_python_version" ]; then
            echo "✅ The Python version is up to date!"

            echo "is_outdated=false" >> $GITHUB_OUTPUT
            echo "latest_version=$latest_release" >> $GITHUB_OUTPUT
          else
            echo "❌ The Python version ($cache_python_version) is outdated!"
            
            echo "is_outdated=true" >> $GITHUB_OUTPUT
            echo "latest_version=$latest_release" >> $GITHUB_OUTPUT
          fi

  update-python:
    name: Update Repository Variable
    runs-on: ubuntu-latest
    needs: check-python
    if: needs.check-python.outputs.is_outdated == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      #- name: Update Repository Variable
      #  run: |
      #    curl -L \
      #      -X PATCH \
      #      -H "Accept: application/vnd.github+json" \
      #      -H "Authorization: Bearer ${{ secrets.GALAXYSLICER_ACCESS_TOKEN }}" \
      #      -H "X-GitHub-Api-Version: 2022-11-28" \
      #      https://api.github.com/repos/${{ github.repository }}/actions/variables/PYTHON_VERSION \
      #      -d '{"name":"PYTHON_VERSION", "value": "${{ needs.check.outputs.latest_version }}"}' 

  prepare_python:
    name: Python
    uses: fr3ak2402/BambuStudio/.github/workflows/prepare_python_windows.yml@python

  prepare_deps:
    name: Prepare deps
    runs-on: windows-latest
    needs:
      - build_deps
      - prepare_pkg_config
      - prepare_python
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore deps
        uses: actions/cache/restore@v4
        id: cache-deps
        with:
          path: ${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps
          key: GalaxySlicerNeo_deps_win_x64_v${{ vars.DEPS_VERSION }}-nightly

      - name: Restore pkg-config
        uses: actions/cache/restore@v4
        id: cache-pkgconfig
        with:
          path: ${{ github.workspace }}/download/pkg-config
          key: pkgconfig-0.28.1

      - name: Restore python
        uses: actions/cache/restore@v4
        id: cache-python
        with:
          path: ${{ github.workspace }}/download/python
          key: python-${{ vars.PYTHON_VERSION }}

      - name: Copy pkg-config into deps
        working-directory: ${{ github.workspace }}
        run: |
            powershell -command "Copy-Item '${{ github.workspace }}\download\pkg-config\bin\pkg-config.exe' -Destination '${{ github.workspace }}\work\Projects\GalaxySlicerNeo_deps\usr\local\bin'"
            powershell -command "Copy-Item -Path '${{ github.workspace }}\download\pkg-config\share\aclocal' -Destination '${{ github.workspace }}\work\Projects\GalaxySlicerNeo_deps\usr\local\share' -Recurse"

      - name: Copy python into deps
        working-directory: ${{ github.workspace }}
        run: |
            powershell -command "Copy-Item -Path '${{ github.workspace }}/download/python' -Destination '${{ github.workspace }}\work\Projects\GalaxySlicerNeo_deps' -Recurse"

      - name: Upload deps (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: GalaxySlicerNeo_deps_win_x64_v${{ vars.DEPS_VERSION }}-nightly.zip
          path: ${{ github.workspace }}/work/Projects/GalaxySlicerNeo_deps
